#include <iostream>
#include <algorithm>
#include <bits/stdc++.h>

using namespace std;

class Vector{
private:
    int size {0} ;
    int *arr = {nullptr};
    int capacity {0};

    void expand_capacity(){

            capacity *= 2;
            cout << "Expand Capacity to " << capacity<<endl;
            int *arr2 = new int [capacity] {};
            for(int i = 0 ; i < size ; ++i){
                arr2[i] = arr[i];
            }
            swap(arr, arr2);
            delete[] arr2;
    }

public:
    Vector(int size):size(size){

        if (size <= 0)
            size = 1;

        capacity = size;
         arr = new int[capacity] {};

    }
    ~Vector(){
        delete[] arr;
        arr = nullptr;

    }

    void print(){
        for(int i = 0 ; i < size ; ++i)
            cout << arr[i] << " ";
        cout << endl;
    }

    int get_size(){
        return size;
    }

    void set(int idx, int value){
        assert(idx >= 0 && idx < size);
        arr[idx] = value;
    }

    int get(int idx){
        assert(idx >= 0 && idx < size);
        return arr[idx];
    }

    int find(int value){
        for(int i = 0 ; i < size ; ++i)
            if (arr[i] == value)
                return i;
        return -1;

    }

    int get_front(){
        return arr[0];
    }

    int get_back(){
        return arr[size - 1];
    }

    void push_back(int value){

        if(size == capacity)
            expand_capacity();

        arr[size ++] = value;
    }

    void insert(int idx, int value){
            if (size == capacity)
                expand_capacity();

            for(int i = size - 1 ; i >= idx ; -- i){
                arr[i + 1] = arr[i];
            }

            arr[idx] = value;
            ++size;
    }

    // Problem #1: Right rotation

    void right_rotate(){

        if (size <= 1)
            return ;

        int last_element = arr[size - 1];
        for (int i = size - 1 ; i > 0 ; -- i){
            arr[i] = arr[i - 1];
        }

        arr[0] = last_element;
    }

    //Problem #1: Right rotation

    void right_rotate_sol_2(){

        if (size <= 1)
            return;

        int last_element = arr[size - 1];
        for(int i = size - 2 ; i >= 0 ; -- i){
            arr[i + 1] = arr[i];
        }

        arr[0] = last_element;

    }

    //Problem #2: Left rotation

    void left_rotate(){

        if(size <= 1)
            return ;

        int first_element = arr[0];
        for(int i = 1 ; i < size ; i ++ ){

                arr[i - 1] = arr[i];

        }

        arr[size - 1] = first_element;
    }

    //Problem #3: Right rotation with steps

    void right_rotate(int times){

        times %= size;
        while (times -- )
                right_rotate();

    }

    //Problem #4: Deleting a position

    int pop(int idx){

        assert(idx >= 0 && idx < size);
        int x = arr[idx];

        for (int i = idx + 1 ; i < size ; ++ i){

          arr[i - 1] = arr[i];

        }

        size --;
        return x ;
    }

    //Problem #5: Improved search

    int find_transposition(int value){

        for(int i = 0 ; i < size ; i ++){

           if (arr[i] == value){
                if(i == 0)
                    return 0;

                swap(arr[i], arr[i - 1]);
                return i - 1;
           }
        }

        return -1;
    }




};

int main()
{
    cout << "Hello world Hello world!" << endl;

    int n = 5;
    Vector v(n);
    for (int i = 0 ; i < n ; i ++ ){
        int x ; cin >> x;
        v.set(i, x);
    }

    v.print();

    cout << v.find_transposition(50)<<endl;
    v.print();







    /*
    cout << v.pop(0)<<endl;
    v.print();

    */


    /*
    v.right_rotate(2);
    v.print();
    for (int i = 0 ; i < n ; i ++ ){
        int x ; cin >> x;
        v.set(i, x);
    }

    v.print();
    v.right_rotate(2);
    v.print();

    */


    //v.print();
    //v.left_rotate();

    //v.print();

    // v.right_rotate();
    // v.print();

    //v.right_rotate_sol_2();
    //v.print();



    /*
    for (int i = 0 ; i < 4 ; i ++ ){
        v.set(i, i + 1);
    }

    v.right_rotate();
    v.print();
    */

    /*
    Vector v(4);
    for (int i = 0 ; i < 2 ; i ++ ){
        v.set(i, i + 1);
    }

    v.print();
    v.insert(3, 100);
    v.print();

    */

    /*
    Vector v (2);
    for (int i = 0 ; i < 2 ; ++ i ){
        v.set(i, i + 1);
    }
    v.print();
    v.push_back(3);
    v.print();
    v.push_back(4);
    v.print();
    cout << v.get_size()<<endl;

    */

    /*
    v.print();

    for(int i = 0 ; i < 5 ; ++i){
        v.set(i, i + 1);
    }
    v.print();

    // cout << v.get(10) << endl;
    cout << v.get(2) << endl;

    cout << v.find(10) << " " << v.find(3) << endl;
    cout << v.get_size()<<endl;
    cout << v.get_front()<<endl;

    */


    return 0;
}
